<?php

namespace Gist\InventoryBundle\Controller;

use Gist\TemplateBundle\Model\CrudController;
use Gist\InventoryBundle\Entity\Product;
use Gist\InventoryBundle\Entity\DamagedItems;
use Gist\InventoryBundle\Entity\DamagedItemsEntry;
use Gist\CoreBundle\Template\Controller\TrackCreate;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Gist\InventoryBundle\Entity\Transaction;
use Gist\InventoryBundle\Entity\Entry;
use Gist\InventoryBundle\Entity\Stock;
use DateTime;

class OpenTesterController extends CrudController
{

    use TrackCreate;

    /**
     * DamagedItemsController constructor.
     */
    public function __construct()
    {
        $this->route_prefix = 'gist_inv_damaged_items';
        $this->list_type = 'dynamic';
        $this->repo = "GistInventoryBundle:OpenTesterEntry";
    }

    /**
     * @param $obj
     * @return string
     */
    protected function getObjectLabel($obj)
    {
        if ($obj == null)
        {
            return '';
        }
        return $obj->getID();
    }

    /**
     * @return DamagedItemsEntry
     */
    protected function newBaseClass()
    {
        return new DamagedItemsEntry();
    }

    /**
     * @param $pos_loc_id
     */
    public function getOpenTesterDataAction($pos_loc_id)
    {
        $em = $this->getDoctrine()->getManager();
    }

    /**
     * @param $pos_loc_id
     */
    public function getOpenTesterDataSummaryAction($pos_loc_id)
    {
        $em = $this->getDoctrine()->getManager();
    }

    /**
     * @return Response
     * @internal param $pos_loc_id
     */
    public function getItemsForTesterOptionsAction($category = null)
    {
        //exclude items that are in pos' tester container
        //$mainPOS = new MainPOSController();
        //return $mainPOS->gridSearchProductAction(null, null);
        $resp = new Response('slkdf');
        $resp->headers->set('Content-Type', 'application/json');

        return $resp;
    }

    /**
     * @param $pos_loc_id
     * @param $entries
     */
    public function saveOpenTesterDataAction($pos_loc_id, $entries)
    {
        $em = $this->getDoctrine()->getManager();
    }

    /**
     * @param $pos_loc_id
     * @param $ot_id -> this is the open tester entry id
     */
    public function updateOpenTesterStatusAction($pos_loc_id, $ot_id, $status)
    {
        $em = $this->getDoctrine()->getManager();

        if ($status == 'consumed') {
            //transfer from pos' open tester container to adjustment container just to zero out
        }
    }
}
