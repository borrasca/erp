{% extends "CatalystTemplateBundle::base.html.twig" %}
{% import "CatalystTemplateBundle::form.html.twig" as form %}

{% block content %}
<div class="row">
    <div class="col-md-12">
        <div class="portlet box blue-hoki">
            <div class="portlet-title">
                <div class="caption">Leave Details {# block form_header %}{% endblock #}</div>
            </div>
            <div class="portlet-body form">
                <!-- BEGIN FORM-->
                <form method="post" class="form-horizontal">
                    <div class="form-body">
                    {{ form.hidden('csrf_token', app.session.get('csrf_token')) }}
                    {{ form.hidden('leave_type_id', '') }}
                    {% set employee = app.user.getEmployee %}
                    {% if employee == NULL %}
                        {{ form.typeahead('Employee Name','emp',object.getEmployee is not null ? object.getEmployee.getDisplayName:'',object.getEmployee is not null ? object.getEmployee.getID:'',path('hris_workforce_employee_ajax_get'),3,4,readonly) }}
                    {% else %}
                        {{ form.typeahead('Employee Name','emp',object.getEmployee is not null ? object.getEmployee.getDisplayName:employee.getDisplayName,object.getEmployee is not null ? object.getEmployee.getID:employee.getID,path('hris_workforce_employee_ajax_get'),3,4,true) }}
                    {% endif %}
                    {{ form.hidden('emp_leave_id',object.getEmpLeave.getID|default(0))}}
                    {% if employee == NULL and object.getEmployee is null %}
                        {{ form.group_select('Type of Leave','emp_leave_id','',object.getEmpLeave.getID|default(0),3,4, readonly) }}    
                    {% else %}
                        {{ form.group_select('Type of Leave','emp_leave_id',leave_type,object.getEmpLeave.getID|default(0),3,4, readonly) }}
                    {% endif %}
                    {{ form.group_text('Available Leave','avail_leave',object.getEmpLeave.getAvailLeaves|default(0),3,4,true) }}
                    {{ form.group_number('No. Leave days applied','apply_leave',object.getAppliedLeaveDays|default(1),3,4,readonly) }}
                    {{ form.group_date('Date Start', 'date_start',object.getDateStart|date('m/d/Y'),3,4,readonly) }}
                    {{ form.group_date('Date End', 'date_end',object.getDateEnd|date('m/d/Y'),3,4,true) }}
                    {{ form.group_textarea('Reason for Leave', 'notes',object.getNotes|default(''),3,3,4,readonly)}}
                    {% if object.getStatus is not same as(null) %}
                        {{ form.group_text('Status','status',object.getStatus|default(''),3,4,true) }}
                    {% endif %}
                    </div>

                    <div class="form-actions fluid">
                        <div class="col-md-9">
                            {% set status = object.getStatus %}
                            {# {% if status is same as('Pending') and app.user.hasAccess('hris_workforce_leave.review')%}
                            <button type="submit" name="action_btn" value="Review" class="btn blue">Review</button>
                            {% endif %}
                            {% if status is same as('Review') and app.user.hasAccess('hris_workforce_leave.approve') %}
                            <button type="submit" name="action_btn" value="Approve" class="btn green">Approve</button>
                            {% endif %}
                            {% if status is same as('Review') and app.user.hasAccess('hris_workforce_leave.reject') %}
                            <button type="submit" name="action_btn" value="Reject" class="btn red">Reject</button>
                            {% endif %} #}
                            {% if not readonly %}
                            <button type="submit" class="btn green">Submit</button>
                            {% endif %}
                            <a href="{{ path(route_list) }}" class="btn default">Cancel</a>
                        </div>
                    </div>
                </form>                
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block js %}
<script>
function setLeaveDates() {
    var sdate = new Date($("input[name='date_start']").val()),
        days = parseInt($('input[name="apply_leave"]').val(), 10),
        new_days = 0;
        count_days = days;

    // var accept_sat = $("input[name='weekends']").parent('span').hasClass('checked');

    var holidays = {{ holidays|json_encode|raw }};

    var url = "{{ path('hris_profile_leave_emp_workweek', { id: ':id' }) }}";
    url = url.replace(":id", $("input[name='emp_id']").val());

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data, text_status, xhr) {
            var accept_sat = (data == "Saturday") ? true : false;
            if ($('input[name="avail_leave"]').val() != 0) {
                if(!isNaN(sdate.getTime())){
                    var new_date = new Date($("input[name='date_start']").val());
                    for (var i = 0; i < days; i++) {
                        if ($.inArray(new_date.toInputFormat(),holidays) > -1 && new_date.getDay() !== 0) {
                            if (new_date.getDay() == 6 && accept_sat) {
                                days = days + 1;
                            } else if(new_date.getDay() > 0 && new_date.getDay() < 6) {
                                days = days + 1;
                            }
                        } else {
                            if (new_date.getDay() === 0) {
                                days = days + 1;
                            }
                            if (new_date.getDay() === 6 && !accept_sat) {
                                days = days + 1;
                            }
                        };
                        new_date.setDate(new_date.getDate() + 1);
                    };
                    
                    sdate.setDate(sdate.getDate() + (days - 1));
                    
                    // if end date falls on sunday, add 1 day
                    if (sdate.getDay() === 0) {
                        sdate.setDate(sdate.getDate() + 1);
                        // if after sunday, end date falls on holiday, add 1 day
                        if ($.inArray(sdate.toInputFormat(),holidays) > -1) {
                            sdate.setDate(sdate.getDate() + 1);
                            $("input[name='date_end']").val(sdate.toInputFormat());
                        } else{
                            $("input[name='date_end']").val(sdate.toInputFormat());
                        };
                    }
                    // if end date falls on saturday, add2 days
                    else if (sdate.getDay() === 6 && !accept_sat) {
                        // if after saturday, end date falls on holiday, add 1 day
                        if ($.inArray(sdate.toInputFormat(),holidays) > -1) {
                            sdate.setDate(sdate.getDate() + 1);
                            $("input[name='date_end']").val(sdate.toInputFormat());
                        } else{
                            $("input[name='date_end']").val(sdate.toInputFormat());
                        };
                    } else if (sdate.getDay() === 6 && accept_sat) {
                        // if after saturday, end date falls on holiday, add 1 day
                        if ($.inArray(sdate.toInputFormat(),holidays) > -1) {
                            sdate.setDate(sdate.getDate() + 3);
                            $("input[name='date_end']").val(sdate.toInputFormat());
                        } else{
                            $("input[name='date_end']").val(sdate.toInputFormat());
                        };
                    } else {
                        $("input[name='date_end']").val(sdate.toInputFormat());
                    };
                } else {
                    alert("Invalid Date");  
                }
            } else{
                $("input[name='date_end']").val(sdate.toInputFormat());
            };
        },
        error: function(xhr, text_status, error) {
        }
    });
}

function setLeaveCount(data) {
    // console.log(data.avail_leave);
    // console.log(data.count_type);
    $('input[name="avail_leave"]').val(data.avail_leave);
    $('input[name="leave_type_id"]').val(data.id);
    if (data.avail_leave == 0) {
        $('input[name="apply_leave"]').val(0);
        $('input[name="apply_leave"]').attr({
            'readonly': true,
            'max': data.avail_leave,
            'min': 0
        });
    }
    else if(data.count_type == 'per Year') {
        $('input[name="apply_leave"]').val(1);
        $('input[name="apply_leave"]').attr({
            'readonly': false,
            'max': data.avail_leave,
            'min': 1
        });
    }
    else if(data.count_type == 'per Request') {
        $('input[name="apply_leave"]').val(data.avail_leave);
        $('input[name="apply_leave"]').attr({
            'readonly': true,
            'max': data.avail_leave,
            'min': 1
        });
    }
    else {
        $('input[name="apply_leave"]').val(data.avail_leave);
        $('input[name="apply_leave"]').attr({
            'readonly': false,
            'max': data.avail_leave,
            'min': 1
        });
    }
}

function filter_select(emp_id) {
    if (emp_id == 0) {
        return false;
    }

    $('input[name="apply_leave"]').attr({
            'min': 1
        });

    var url = "{{ path ('hris_profile_leaves_emp_ajax', { id: ':emp_id' }) }}";
    url = url.replace(":emp_id", emp_id);
    // var sel = {{ object.getLeaveType.getID|default(0) }};

    $('select[name="emp_leave_id"]').empty();

    // console.log(url);
    // get evaluator list
    $.getJSON(url, function(data){
        // console.log(data);

        $('select[name="emp_leave_id"]').html('<option></option>').select2();
        i=0;
        for(var index in data)
        {
            $('select[name="emp_leave_id"]').append('<option value="'+ data[index].id + '">'+ data[index].name + ' </option>');
        }
        // set selected index value
        // if (sel !== 0) {
        //     $('select[name="emp_leave_id"]').val(sel).trigger('change');   
        // };
    });
}

function getLeaveData(val) {
    var url = "{{ path('hris_profile_leave_emp_ajax', {'id': ':id'}) }}";
    url = url.replace(':id', val);
    
    // console.log(url);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data, text_status, xhr) {
            // console.log(data);
            setLeaveCount(data);
            setLeaveDates();
        },
        error: function(xhr, text_status, error) {
        }
    });
}

function setDatePicker(id) {
    var url = "{{ path('hris_profile_leave_emp_workweek', { id: ':id' }) }}";
    url = url.replace(":id", id);
    // toggle include saturday
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data, text_status, xhr) {
            var accept_sat = (data == "Saturday") ? true : false;
            if (accept_sat) {
                // alert('has class!');
                $("input[name='date_start']").datepicker('setDaysOfWeekDisabled', [0]);
            } else{
                // alert('no class!');
                $("input[name='date_start']").datepicker('setDaysOfWeekDisabled', [0,6]);
            };
        }
    });
}

$(document).ready(function() {

    // var status = "{{ object.getStatus }}";

    // if (status == 'Pending') {
    //     getLeaveData($('select[name="emp_leave_id"]').val());
    // };

    $('#cemp_typeahead').change(function() {
        $("#cform-agency").val('');
        if ($('#cemp_id').val() != '') 
        {

        }
        else
        {
            $('#cemp_typeahead').val('');
        }
    });

    $('#check_day').click(function (e){
        e.preventDefault();
        var sdate = new Date($("input[name='date_start']").val());
        alert(sdate.getDay());
    });

    // disable calendar button
    $('.calendar').prop('disabled', true);

    // disable selection of weekends
    $("input[name='date_start']").datepicker({
        daysOfWeekDisabled: [0,6]
    });

    // set default error and success elements
    jQuery.validator.setDefaults({
        errorClass: 'help-block',
        errorElement: 'span',
        errorPlacement: function(error, element) {
            if(element.parent().parent().hasClass('form-group'))
            {
                error.appendTo(element.parent().last());
                element.parent().parent().addClass('has-error');
            }
            else if(element.parent().parent().hasClass('checker'))
            {
                error.appendTo(element.parent().parent().parent().parent().last());
                element.parent().parent().parent().parent().parent().parent().addClass('has-error');
            }
            else if(element.parent().parent().hasClass('radio'))
            {
                error.appendTo(element.parent().parent().parent().parent().last());
                element.parent().parent().parent().parent().parent().parent().addClass('has-error');
            }
            else
            {
                error.appendTo(element.parent().parent().last());
                element.parent().parent().parent().addClass('has-error');
            }
        },
        success: function(element) {
            if(element.parent().parent().hasClass('form-group'))
            {
                element.parent().parent().removeClass('has-error');
                element.parent().parent().addClass('has-success');
            }
            else if(element.parent().parent().hasClass('checker'))
            {
                element.parent().parent().parent().parent().parent().removeClass('has-error');
                element.parent().parent().parent().parent().parent().addClass('has-success');
            }
            else if(element.parent().parent().hasClass('radio'))
            {
                element.parent().parent().parent().parent().parent().removeClass('has-error');
                element.parent().parent().parent().parent().parent().addClass('has-success');
            }
            else
            {
                element.parent().parent().parent().removeClass('has-error');
                element.parent().parent().parent().addClass('has-success');
            }
            element.remove();
        }
    });

    // validate form elements
    $(".form-horizontal").validate({
        //ignore: ":hidden:not(emp_id)",
        onfocusout: function(element) {
           this.element(element);
        },
        rules: {
            emp: "required",
            apply_leave: {
                min: 1,
            }
        },
        submitHandler: function(form) {
            form.submit();
        }
    });

    $('select[name="emp_leave_id"]').change(function() {
        getLeaveData($(this).val());
    });

    $("input[name='apply_leave']").on("change", function(){
       setLeaveDates();
    });

    $("input[name='date_start']").on("change", function(e){
       setLeaveDates();
    });

    Date.prototype.toInputFormat = function() {
       var yyyy = this.getFullYear().toString();
       var mm = (this.getMonth()+1).toString(); // getMonth() is zero-based
       var dd  = this.getDate().toString();
       return (mm[1]?mm:"0"+mm[0]) + "/" + (dd[1]?dd:"0"+dd[0]) + "/" + yyyy; // padding
    };

    $('input[name="emp_id"]').on("change", function(){
        // filter_select($(this).val());
        console.log($(this).val());
    });

    $('.typeahead').each(function(){
        var auto = $(this);
        auto.typeahead('destroy');
    });

    $('#cemp_typeahead').typeahead({
        ajax: "{{ path('hris_workforce_employee_ajax_get') }}",
        onSelect: function(item){
            $('#cemp_id').val(item.value);
            filter_select(item.value);
            setDatePicker(item.value);
        }
    });

});
</script>
{% endblock %}
