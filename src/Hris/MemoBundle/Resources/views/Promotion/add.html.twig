{% extends "CatalystTemplateBundle::base.html.twig" %}
{% import "CatalystTemplateBundle::form.html.twig" as form %}
{% set view_mode = false %}
{% block content %}
<div class="row">
    <div class="col-md-12">
        <div class="portlet box blue-hoki">
            <div class="portlet-title">
                <div class="caption">Create {{type}} Memo</div>
            </div>
            <div class="portlet-body form">
                <form method="post" class="form-horizontal">
                    <div class="form-body">
                        <div class="form-group">
                            <input type="hidden" name="type" id="type" value="{{type}}">
                            {{ form.group_text('Issued by', 'issued_by', issued_by|default('HR Admin'), 3, 4, true) }}
                             {{ form.hidden('csrf_token',app.session.get('csrf_token')) }}
                            {% if employee is not defined %}
                                {% if type == 'Violation' %}
                                    {{ form.typeahead('Employee Name','emp','','',path('hris_workforce_employee_ajax_get'),3,4)}}
                                    <div id="agent">
                                    {{ form.group_text('Agency', 'agency', agency|default(''), 3, 4) }}
                                    </div>
                                {% else %}
                                    {{ form.typeahead('Employee Name','emp','','',path('hris_workforce_employee_ajax_get'),3,4)}}
                                {% endif %}
                            {% else %}
                            {{ form.group_text('Issued to','issued_to_name', employee.getDisplayName|default(''),3,4, true) }}
                            {{ form.group_text('Department','issued_to_dept', employee.getDepartment.getName|default(''),3,4, true) }}
                            <input type="hidden" name="issued_to" id="issued_to" value="{{employee.getID|default('')}}">
                            {% endif %}
                        </div>
                    </div>
                    {# {% if type == 'Promotion' %}
                        {% include "HrisMemoBundle:Memo:promotion.html.twig" %}
                    {% elseif type == 'Tardiness' %}
                        {% include "HrisMemoBundle:Memo:tardiness.html.twig" %}
                    {% elseif type == 'Regularization' %}
                        {% include "HrisMemoBundle:Memo:regularization.html.twig" %}
                    {% elseif type == 'Violation' %}
                        {% include "HrisMemoBundle:Memo:violation.html.twig" %}
                    {% elseif type == 'Disciplinary' %}
                        {% include "HrisMemoBundle:Memo:disciplinary.html.twig" %}
                    {% endif %} #}
                    <hr>
                    {% if view_mode == true %}
                    {{ form.group_text('Department From', 'department_from', employee.getDepartment.getName, 3, 4, true) }}
                    {{ form.group_text('Department To', 'department_to', department_to|default(''), 3, 4, view_mode) }}
                    {{ form.group_text('Position From', 'position_from', employee.getJobTitle.getName, 3, 4, true) }}
                    {{ form.group_text('Position To', 'position_to', position_to|default(''), 3, 4, view_mode) }}
                    {{ form.group_text('Job-level From', 'joblevel_from', employee.getJobLevel.getName, 3, 4, true) }}
                    {{ form.group_text('Job-level To', 'joblevel_to', joblevel_to|default(''), 3, 4, view_mode) }}
                    {% else %}
                    {{ form.group_text('Department From', 'department_from', employee.getDepartment.getName, 3, 4, true) }}
                    {{ form.group_select('Department To','department_to',dept_opts, '' ,3,4, readonly) }}
                    {{ form.group_text('Position From', 'position_from', employee.getJobTitle.getName, 3, 4, true) }}
                    {{ form.group_select('Position To','position_to', title_opts, '' ,3,4, readonly) }}
                    {{ form.group_text('Job-level From', 'joblevel_from', employee.getJobLevel.getName, 3, 4, true) }}
                    {{ form.group_select('Job Level To','joblevel_to', level_opts, '' ,3,4, readonly) }}
                    {% endif %}
                    <div class="form-actions fluid">
                        <div class="col-md-offset-3 col-md-9">
                            {% if not readonly %}
                            <button type="submit" class="btn blue">Send</button>
                            {% endif %} 
                            <a href="{{ path(route_list) }}" class="btn default">Cancel</a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block js %}
<script>
function update_form()
{
    $.getJSON('/workforce/memo/agency/' + $('#cemp_id').val(), function(data) {
        if (data.employment_status != 'Contractual') 
        {
            $("#cform-agency").val('Employee not under agency');
            $("#agent").hide();
        }
        else
        {
            $("#cform-agency").val('');
            $("#agent").show();
        }
    });
}
function checkTypeAhead()
{
    if ($( "#cemp_id" ).val() == '') 
    {
        alert('NO EMP SELECTED');
    }
}
$(document).ready( function() {

    $('#cform-date_of_incident').datepicker({
    todayHighlight: true,
    endDate: '0',
    });

    
    $("#others_form").hide();
    $("#suspension_form").hide();
    $("#agent").hide();
    $('#cemp_typeahead').change(function() {
        $("#cform-agency").val('');
        if ($('#cemp_id').val() != '') 
        {
            update_form();
        }
        else
        {
            $('#cemp_typeahead').val('');
        }
    });



    $("#cform-action").live('change', function(){
        $("#others_form").hide();
        $("#suspension_form").hide();

        if ($('#cform-action').val() == 2) 
        {
            $("#others_form").show();
        }
        else if ($('#cform-action').val() == 1) 
        {
            $("#suspension_form").show();
        }
    });

    $('#cform-date_start').datepicker().on('changeDate', function (ev) {
            $('#cform-date_end').datepicker({
            startDate: $('#cform-date_start').val(),
            });
    });

    $('.calendar').prop('disabled', true);

    $('#cform-date_from').datepicker().on('changeDate', function (ev) {
            $('#cform-date_to').datepicker({
            todayHighlight: true,
            startDate: $('#cform-date_from').val(),
            });
    });
    // set default error and success elements
    jQuery.validator.setDefaults({
        errorClass: 'help-block',
        errorElement: 'span',
        errorPlacement: function(error, element) {
            if(element.parent().parent().hasClass('form-group'))
            {
                error.appendTo(element.parent().last());
                element.parent().parent().addClass('has-error');
            }
            else if(element.parent().parent().hasClass('checker'))
            {
                error.appendTo(element.parent().parent().parent().parent().last());
                element.parent().parent().parent().parent().parent().parent().addClass('has-error');
            }
            else if(element.parent().parent().hasClass('radio'))
            {
                error.appendTo(element.parent().parent().parent().parent().last());
                element.parent().parent().parent().parent().parent().parent().addClass('has-error');
            }
            else
            {
                error.appendTo(element.parent().parent().last());
                element.parent().parent().parent().addClass('has-error');
            }
        },
        success: function(element) {
            if(element.parent().parent().hasClass('form-group'))
            {
                element.parent().parent().removeClass('has-error');
                element.parent().parent().addClass('has-success');
            }
            else if(element.parent().parent().hasClass('checker'))
            {
                element.parent().parent().parent().parent().parent().removeClass('has-error');
                element.parent().parent().parent().parent().parent().addClass('has-success');
            }
            else if(element.parent().parent().hasClass('radio'))
            {
                element.parent().parent().parent().parent().parent().removeClass('has-error');
                element.parent().parent().parent().parent().parent().addClass('has-success');
            }
            else
            {
                element.parent().parent().parent().removeClass('has-error');
                element.parent().parent().parent().addClass('has-success');
            }
            element.remove();
        }
    });

    // validate form elements
    $(".form-horizontal").validate({
        //ignore: ":hidden:not(emp_id)",
        onfocusout: function(element) {
           this.element(element);
        },
        rules: {
            message: "required",
            consequence: "required",
            basicsalary_to: "required",
            allowance_to: "required",
            date_of_incident: "required",
            location: "required",
            violation_committed: "required",
            violated_policy: "required",
            reason: "required",
            date_of_exp: "required",
            action: "required",
            date_start: "required",
            date_end: "required",
            other_actions: "required",
            emp: "required",
            agency: "required",
        },
        messages: {
            cemp_id: "REQUIRED",
            basicsalary_to: "New salary must be greater than previous salary",
            allowance_to: "Allowance must be indicated",
        },
        submitHandler: function(form) {
            form.submit();
        }
    });
});
</script>
{% endblock %}